{:data {program

        {:data {}

 :pipes [{:name root
          :pipe ["hi"
                 [1 2 3 4]
                 {"name" "chris"
                  "height" "short"}]}
         ]

 :main root}




        state {"pipe" foo
               "step" 0
               "prev" [root foo cool]
               "dirty" "full"
               "contexts" #{:app}
               "modifying" []
               "context-menu" {}
               }}
 :pipes [

         ;;************************************************
         ;; root
         ;;************************************************

         {:name root
          :scope [program state]
          :pipe [(match [(state "dirty")]
                        ["full"] (core/!runner program (find-pipe (state "pipe")) true)
                        [true] (core/!runner program (find-pipe (state "pipe")) false)
                        :else nil)
                 (let [program (core/meta-walk program ['program])]
                   [:div#aurora
                    (breadcrumb state)
                    (workspace program state (find-pipe (state "pipe")))
                    (console program state)
                    ])
                 (core/root-inject _PREV_)]}

         ;;************************************************
         ;; breadcrumb
         ;;************************************************

         {:name breadcrumb
          :scope [state]
          :pipe [[:ul.breadcrumb
                  (each-indexed (state "prev") (partial crumb state))
                  ]]}

         {:name crumb
          :scope [state i prev]
          :pipe [[:li {:click (partial crumb-click state i prev)} (str prev)]]}

         {:name crumb-click
          :scope [state i prev]
          :pipe [(assoc state "prev" (subvec (state "prev") 0 (inc i)))
                 (assoc _PREV_ "pipe" prev)
                 (commute _PREV_)]}

         ;;************************************************
         ;; workspace
         ;;************************************************

         {:name workspace
          :scope [program state pipe]
          :pipe [[:ul.workspace
                  (scope state pipe)
                  (each-indexed (:pipe pipe) (partial workspace-step (core/->path pipe :pipe)))
                  ]]}

         {:name workspace-step
          :scope [path i step]
          :pipe [[:li.step (rep program state (conj path i) step)]]}

         {:name scope
          :scope [state pipe]
          :pipe [[:li.step "scope"]]}

         ;;************************************************
         ;; primitives
         ;;************************************************

         {:name primitive
          :scope [state path prim]
          :pipe [(match [(state "modifying")]
                        [path] [:input {"value" prim
                                        "focused" true
                                        "submit" (partial modify! state path)}]
                        :else [:div.string {:click (partial set-modifying state path)} prim])]}

         {:name set-modifying
          :scope [state path]
          :pipe [(assoc state "modifying" path)
                 (commute _PREV_)]}

         {:name modify!
          :scope [state path e]
          :pipe [(assoc state "modifying" nil)
                 (assoc _PREV_ "dirty" true)
                 (commute _PREV_)
                 (core/commute-path path (e "value"))]}

         ;;************************************************
         ;; reps
         ;;************************************************

         {:name rep
          :scope [program state path thing]
          :pipe [(match [(core/type thing)]
                        [:vector] (r-vector program state path thing)
                        [:map] (r-map program state path thing)
                        [:list] (r-invocation program state path thing)
                        :else (primitive state path thing))]}

         {:name rep-indexed
          :scope [program state path i thing]
          :pipe [(rep program state (conj path i) thing)]}

         {:name r-vector
          :scope [program state path thing]
          :pipe [[:div.vector "[" (each-indexed thing (partial rep-indexed program state path)) "]"]]}

         {:name r-map
          :scope [program state path thing]
          :pipe [[:div.map "{" (each thing (partial r-map-entry program state path)) "}"]]}

         {:name r-map-entry
          :scope [program state path [k v]]
          :pipe [[:div.entry
                  (rep program state (cljs.core/conj path k :aurora.core/key) k)
                  ": "
                  (rep program state (conj path k) v)]]}

         ;;************************************************
         ;; invocations
         ;;************************************************


         ;;************************************************
         ;; menu
         ;;************************************************

         ;;************************************************
         ;; utils
         ;;************************************************

         {:name find-pipe
          :scope [name]
          :pipe [(filter-match [cur name]
                               {:name cur}
                               (get-in program [:pipes]))
                 (first _PREV_)]}

         {:name console
          :scope [program state]
          :pipe [[:div.console
                  [:p "program:"]
                  (pr-str program)
                  [:p "state:"]
                  (pr-str state)]]}


         ]
 :main root}

