var examples = {
  "Tutorial": "; This is a wireframe version of a textual editor for Eve. Ultimately, \n; this is unlikely to be how people interact with the system, but it \n; gives us an opportunity to work with the language before the real \n; workflow has fully come together and test the language in fun and \n; interesting ways.\n\n; Eve is based on datalog, but you can think of it more as a non-crappy \n; SQL. As such, the operations you have available to you look and feel \n; like relational algebra. As a matter of fact, everything in Eve is \n; just a view over some inputs. Let's see how we define a view:\n\n* user\n  ~ name age\n  + \"Chris\" 27\n  \n; the * denotes a new view, the symbol that follows it is its name. \n; You can see that this causes a table card to appear on the right and \n; from that it's probably pretty easy to guess what the other two lines \n; are doing. The first is defining the headers of the view, the second \n; adds a single row with the name \"Chris\" and the age 27. Let's see how\n; we use that information in another view to calculate when I was born\n; by uncommenting the code below:\n\n;* yearBorn\n;  | user age\n;  born = 2014 - @age\n\n; Here we've defined another view \"yearBorn\" that selects the age \n; from the \"user\" view and then calculates a new column called born.\n; everything after an equals sign is a javascript function right now. In\n; order to denote the we want the value of the age column in our function\n; we precede the symbol with an @.\n\n; Everything in Eve is live - this is one of the benefits we get from\n; everything being a view. Try adding a new name and age to the user\n; view and see what happens. All the views now have multiple rows. Let's\n; see how we would join the yearBorn and user view together:\n\n;* userBorn\n;  | user name age\n;  | yearBorn age born\n  \n; Joins are implicit in Eve, which means columns referenced with the same\n; symbol are joined automatically. You can alias fields to control what\n; symbol they have by doing column:alias like so:\n\n;* userBornAlias\n;  | user name age:a\n;  | yearBorn age:a born:birthYear\n  \n; You can also filter by a value using column=value:\n\n;* peopleAged27\n;  | user name age=27\n\n; You aren't limited to filtering by constants though, you can also filter\n; via a javascript function that returns true or false:\n\n;* peopleOlderThan 25\n;  | user name age\n;  ? @age > 25\n \n; The last piece of the puzzle is aggregates. Let's see how we calculate\n; the average age of our users:\n\n;* averageAge\n;  > user | age = avg(@user.age)\n  \n; the > denotes that we're takings lots of rows and turning them into a\n; single value. We name that value age in this case and set it equal\n; to a function that takes the average of the age column in the user table\n; we're aggregating over. If we had just used @age it would mean the age\n; field in the current view as opposed to the age field in the table\n; we're aggregating over.\n\n; One other thing we added syntax for is UI since it's pretty common to\n; want UI in applications. We represent HTML as nested lists denoted by\n; enclosing brackets like so:\n\n;* drawUsers\n;  | user name age\n;  [\"p\" {\"id\" name} name \" is \" age \" years old.\"]\n\n; You'll note at the top of our stack of cards that a UI card has now \n; appeared and that there are lines for each user in the user table. \n; Note that we needed to make each paragraph unique by giving it an id. \n; The second element of a UI list can be a map of attributes. The first \n; is the type of HTML tag and everything else is interpreted as a child. \n; You can nest these lists to your heart's content.\n  \n; And that's more or less it. The entire language is just stringing these\n; views together in interesting ways. Checkout the various examples to get\n; a feel for how these things start to come together and see some more\n; advanced notions like views that have multiple contributors (which\n; allows you to do recursion).\n  ",
  "Incrementer": ";*****************************************************\n; An incrementer button\n;*****************************************************\n\n* increment button\n  > event label=\"increment\" | clicks = count(@event.eid)\n  [\"button\" {\"click\" \"increment\"}\n    \"I've been clicked \" clicks \" times.\"]",
  "Net worth": ";;***********************************************\n;; Net worth example\n;;***********************************************\n\n* netWorth\n  year = 2014\n  rate = 0.02\n  principle = 100000\n \n* netWorthRecurse\n  | netWorth year:prev principle:pr rate\n  year = @prev + 1\n  ? @year < 2030\n  principle = (@pr * (1 + @rate)).toFixed(2)\n\n* netWorth\n  | netWorthRecurse year principle rate",
  "Department heads": ";*************************************\n; Department heads\n;*************************************\n\n* employee\n  ~ name department salary\n  + \"jamie\" \"engineering\" 75000\n  + \"chris\" \"engineering\" 75000\n  + \"rob\" \"operations\" 75000\n \n* heads\n  ~ name department \n  + \"chris\" \"engineering\"\n  + \"harry\" \"magic\"\n  + \"rob\" \"operations\"\n \n* totals \n  | heads name department\n  > employee department | cost = sum(@employee.salary)\n \n* average salary\n  > employee | average = avg(@employee.salary)",
  "TodoMVC": ";;*************************************************\n;; Todo views\n;;*************************************************\n\n* todosText\n  | todosOverTime id\n  > todosOverTime id | todo = maxBy(@todosOverTime.todo, @todosOverTime.time, \"\")\n\n* todos\n  | todosText id todo\n  | todosActive id isActive\n  | !removedTodos id \n* todos\n  | todosText id todo\n  | !todosActive id\n  | !removedTodos id\n  isActive = \"active\"\n  \n* visibleTodos\n  | todosToDraw id\n  | todos id todo isActive \n  | todoEditing id\n  editing = \"true\"\n* visibleTodos\n  | todosToDraw id\n  | todos id todo isActive\n  | !todoEditing id\n  editing = \"false\"\n  \n* remainingTodos\n  | todos id isActive=\"active\" \n* completedTodos\n  | todos id isActive=\"completed\" \n  \n;;*************************************************\n;; Events\n;;*************************************************\n\n* addedTodos\n  | event label=\"keydown\" eid value\n  | keyboard eid keyCode=13 \n  time = @eid\n* todosOverTime\n  | addedTodos value:todo eid:id time\n\n* todosToDraw\n  | todos isActive:f id\n  | filter filter:f\n* todosToDraw2\n  | todos id\n  | filter filter\n  filter = \"all\"\n* todosToDraw\n  | todosToDraw2 id filter:f\n \n* filter\n  > event label=\"set filter\" | filter = maxBy(@event.key, @event.eid, \"all\")\n  \n* toggleAllTemp\n  | event label=\"toggle-all\" eid\n  > event label=\"toggle-all\" | curToggle = count(@event.eid)\n;;TODO figure out how to make toggle-all do the right thing\n\n* toggles\n  | event label=\"toggle active\" key\n  > event label=\"toggle active\" key | total = count(@event.eid)\n  > event label=\"toggle active\" key | lastEid = maxBy(@event.eid, @event.eid, 0)\n  isActive = @total % 2 === 0 ? \"active\" : \"completed\"\n* todosActive\n  | toggles isActive key:id\n  \n* editedTodos\n  | event label=\"edit todo\" eid key value\n  | keyboard eid keyCode=13 \n* todosOverTime\n  | editedTodos value:todo key:id eid:time\n  \n* removeEvents\n  | event label=\"remove todo\" key:id \n* removedTodos\n  | removeEvents id\n* removeCompleted\n  | event label=\"remove completed\" eid\n  | toggles lastEid key:id isActive=\"completed\"\n  ? @lastEid < @eid\n* removedTodos\n  | removeCompleted id\n  \n* todoEditing1\n  | event label=\"edit todo\" key:id\n  | !event label=\"done editing\" key:id\n* todoEditing2\n  | event label=\"edit todo\" key:id eid:open\n  | event label=\"done editing\" key:id eid:close\n  ? @open > @close\n* todoEditing\n  | todoEditing1 id\n* todoEditing\n  | todoEditing2 id\n\n;;*************************************************\n;; Drawing \n;;*************************************************\n\n* draw todos\n  | visibleTodos id todo isActive editing=\"false\"\n  uiId = \"todo\" + @id\n  checked = @isActive === \"active\" ? \"false\" : \"checked\"\n  klass = @isActive === \"active\" ? \"active\" : \"completed\"\n  [\"li\" {\"class\" klass \"id\" uiId \"parent\" \"todo-list\" \"doubleClick\" \"edit todo\" \"key\" id \"ix\" id}\n    [\"input\" {\"type\" \"checkbox\" \"checked\" checked \"click\" \"toggle active\" \"key\" id}]\n    [\"label\" todo]\n    [\"button\" {\"click\" \"remove todo\" \"key\" id}]]\n    \n* draw editing todos\n  | visibleTodos id todo isActive editing=\"true\"\n  uiId = \"todo\" + @id + \"-editor\"\n  [\"li\" {\"id\" uiId \n         \"parent\" \"todo-list\" \n         \"ix\" id}\n    [\"input\" {\"type\" \"text\" \"class\" \"todo-editor\" \"keyDown\" \"edit todo\" \"blur\" \"done editing\" \"key\" id \"value\" todo}]]\n    \n* draw todos left\n  > remainingTodos | remaining = count(@remainingTodos.id)\n  ? @remaining > 0\n  remainingText = @remaining === 1 ? \" todo left\" : \" todos left\"\n  [\"span\" {\"class\" \"todo-count\" \"parent\" \"footer\" \"ix\" \"-1\"} \n    [\"strong\" remaining] remainingText]\n  \n* draw remove completed\n  > completedTodos | completed = count(@completedTodos.id)\n  ? @completed > 0\n  [\"button\" {\"class\" \"clear-completed\" \"click\" \"remove completed\" \"parent\" \"footer\" \"ix\" 2} \"Clear completed (\" completed \")\"]\n\n* todomvc\n  | filter filter\n  allClass = @filter === \"all\" ? \"active\" : \"\"\n  activeClass = @filter === \"active\" ? \"active\" : \"\"\n  completedClass = @filter === \"completed\" ? \"active\" : \"\"\n  [\"div\" {\"class\" \"running-wrapper\"}\n    [\"div\" {\"class\" \"todoapp\"}\n      [\"h1\" \"Todos\"]\n      [\"header\" \n        [\"input\" {\"type\" \"checkbox\" \"class\" \"toggle-all\" \"click\" \"toggle-all\"}]\n        [\"input\" {\"type\" \"text\" \"class\" \"new-todo\" \"placeholder\" \"What needs to be done?\" \"keyDown\" \"keydown\"}]]\n      [\"ul\" {\"class\" \"todo-list\" \"id\" \"todo-list\"}]\n      [\"div\" {\"class\" \"footer\" \"id\" \"footer\"}\n        \n        [\"ul\" {\"class\" \"filters\" \"id\" \"filters-list\"}\n          [\"li\" [\"button\" {\"class\" allClass \"click\" \"set filter\" \"key\" \"all\"} \"all\"]]\n          [\"li\" [\"button\" {\"class\" activeClass \"click\" \"set filter\" \"key\" \"active\"} \"active\"]]\n          [\"li\" [\"button\" {\"class\" completedClass \"click\" \"set filter\" \"key\" \"completed\"} \"completed\"]]\n          ]]\n        ]]",
  "Turing machine": "; --- input ---\n\n* machinePositionInput\n  ~ time position\n  + 0 0\n\n* machineStateInput\n  ~ time state\n  + 0 \"a\"\n\n* transition\n  ~ oldState oldSymbol write move newState\n  + \"a\" \"x\" \"x\" \"left\" \"b\"\n  + \"a\" 0 0 \"right\" \"a\"\n  + \"a\" 1 1 \"right\" \"a\"\n  + \"b\" \"x\" 1 \"right\" \"c\"\n  + \"b\" 0 1 \"left\" \"c\"\n  + \"b\" 1 0 \"left\" \"b\"\n  + \"c\" \"x\" \"x\" \"left\" \"d\"\n  + \"c\" 0 0 \"right\" \"c\"\n  + \"c\" 1 1 \"right\" \"c\"\n  \n* initialWrite\n ~ position symbol\n + 0 0\n + 1 1\n + 2 1\n \n; --- code ---\n\n* machinePosition\n  | machinePositionInput time position\n\n* machineState\n  | machineStateInput time state\n\n* transitionTaken\n  | machinePosition time position\n  | machineState time state\n  > write position | symbol = lastBefore(@write.symbol, @write.time, @time, \"x\")\n  | transition oldState:state oldSymbol:symbol write move newState\n  \n* write\n  time = -1\n  | initialWrite position symbol\n  \n* write\n  | transitionTaken time position write:symbol\n  \n* changeState\n  | transitionTaken time newState\n  newTime = @time + 1\n* machineState\n  | changeState newTime:time newState:state\n\n* moveLeft\n  | transitionTaken time position move=\"left\"\n  newPosition = @position - 1\n  newTime = @time + 1\n* machinePosition\n  | moveLeft newTime:time newPosition:position\n\n* moveRight\n  | transitionTaken time position move=\"right\"\n  newPosition = @position + 1\n  newTime = @time + 1\n* machinePosition\n  | moveRight newTime:time newPosition:position\n  \n; --- output ---\n\n* tape\n  | write position\n  > write position | symbol = maxBy(@write.symbol, @write.time)\n ",
  "Graph paths": ";*************************************\n; Path example\n;*************************************\n\n* edge\n  ~ from to\n  + \"a\" \"b\"\n  + \"b\" \"c\"\n  + \"c\" \"d\"\n\n* path\n  | edge from to\n\n* path2\n  | edge from to:t\n  | path from:t to\n\n* path\n  | path2 from to "
}
